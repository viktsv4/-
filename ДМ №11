#include <iostream>
#include <vector>
#include <queue>


using namespace std;

int prim(vector<vector<pair<int, int>>>& gr, int start) {
    vector<int> distance(gr.size(), numeric_limits<int>::max());
    vector<int> parent(gr.size(), -1);
    vector<int> done(gr.size(), 0);
    priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> q;
    int final_weight = 0;
    q.push({0, start});
    distance[start] = 0;

    while (!q.empty()) {
        int now = q.top().second;
        q.pop();

        if (done[now] == 0) {
            done[now] = 1;
            final_weight += distance[now];
            if (parent[now] != -1) {
                cout << parent[now] << " - " << now << endl;
            }
        }
        for (auto& neighbor : gr[now]) {
            int v = neighbor.first;
            int weight = neighbor.second;

            if (!done[v] && weight < distance[v]) {
                distance[v] = weight;
                parent[v] = now;
                q.push(make_pair(distance[v], v));
            }
        }
    }
}

int main() {
    int n, m;
    cin >> n >> m;
    vector<vector<pair<int, int>>> gr(n);

    for (int i = 0; i < m; i++) {
        int first, second, weight;
        cin >> first >> second >> weight;
        gr[first - 1].push_back({second - 1, weight});
        gr[second - 1].push_back({first - 1, weight});
    }
    prim(gr, 0);
    return 0;
}
